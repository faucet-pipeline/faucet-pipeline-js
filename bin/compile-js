#!/usr/bin/env node
"use strict";

let bundler = require("../src");
let fs = require("fs");
let path = require("path");

// command-line arguments
let { argv } = process;
let minify = includesAny(argv, "-m", "--minify");
let watch = includesAny(argv, "-w", "--watch");
let poll = argv.includes("--poll");
let configFile = getOptionValue(argv, "-c", "--config") || "package.json";
// TODO: optionally disable fingerprinting

let rootDir = process.cwd();
let config = readConfig(path.join(rootDir, configFile), "jsConfig");
let options = {
	rootDir,
	watch: watch && (poll ? "poll" : true)
};
bundler(config.bundles, options);

// TODO: human-friendly error reporting
function readConfig(filepath, property) {
	let json = fs.readFileSync(filepath);
	let config = JSON.parse(json);
	return config[property];
}

// parses command-line arguments, returning option value: `--foo bar` â†’ `"bar"`
// TODO: use minimist for proper POSIX compliance
function getOptionValue(argv, ...options) {
	let res;
	options.some(option => {
		let i = argv.indexOf(option);
		if(i === -1) {
			return false;
		}

		res = argv[i + 1];
		return true;
	});
	return res;
}

function includesAny(arr, ...items) {
	return items.some(item => arr.includes(item));
}
