#!/usr/bin/env bash

set -euo pipefail

root=`dirname "$0"`
root=`node -r fs -p "fs.realpathSync(process.argv[1]);" "$root"`

. "$root/../../node_modules/faucet-pipeline/test/cli_harness.sh"

bin="$root/../../bin"

# compares two files and the inline source map
function assert_identical_sourcemap {
	actual="${1:?}"
	expected_src="${2:?}"
	expected_map="${3:?}"
	# ensure that $actual contains an inline source map
	grep -q '^//# sourceMappingURL' "$actual" ||
			fail "missing inline source map in \`$actual\`"
	# save the original file
	mv "$actual" "$actual.orig"
	# drop the inline source map
	sed '\!^//# sourceMappingURL!d' <"$actual.orig" >"$actual"
	# decode and clean the inline source map
	#  source maps contain system-dependent information (full paths)
	#  so we drop all information we're not explicitly testing
	grep '^//# sourceMappingURL' "$actual.orig" |
			cut -d, -f2 |
			"$bin/base64-decode" |
			"$bin/sourcemap-clean" version names mappings sourcesContent \
			> "$actual.map"
	assert_identical "$actual" "$expected_src"
	assert_json "$actual.map" "$expected_map"
}

begin "$root/test_basic"
	faucet
	assert_identical "./dist/bundle.js" "./expected.js"
end

begin "$root/test_basic" # once more with fingerprinting
	faucet --fingerprint
	assert_identical "./dist/bundle-b555fd611fda4652d2ed16fd54eff811.js" "./expected.js"
end

begin "$root/test_global_shim"
	faucet
	assert_identical "./dist/bundle.js" "./expected.js"
end

begin "$root/test_transpilation"
	faucet
	assert_identical "./dist/bundle.js" "./expected.js"
end

begin "$root/test_sourcemap"
	faucet
	assert_identical_sourcemap "./dist/bundle.js" "./expected.js" "./expected.js.map"
	assert_identical_sourcemap "./dist/bundle-esnext.js" "./expected-esnext.js" "./expected-esnext.js.map"
end

begin "$root/test_jsx"
	faucet
	assert_identical "./dist/bundle.js" "./expected.js"
end

begin "$root/test_typescript"
	faucet
	assert_identical "./dist/bundle.js" "./expected.js"
	rm -r "./.rpt2_cache"
end

begin "$root/test_browserslist"
	faucet
	assert_identical "./dist/bundle.js" "./expected.js"
	assert_identical "./dist/bundle_alt.js" "./expected_legacy.js"
	assert_identical "./dist/bundle_legacy.js" "./expected_legacy.js"
end

begin "$root/test_multi"
	faucet
	assert_identical "./dist/foo.js" "./expected_foo.js"
	assert_identical "./dist/bar.js" "./expected_bar.js"
	assert_json "./dist/manifest.json" "./expected.json"
end

begin "$root/test_manifest"
	faucet --fingerprint
	assert_identical "./dist/manifest.json" "./expected.json"
end

begin "$root/test_manifest_uris"
	faucet --fingerprint
	assert_json "./dist/manifest.json" "./expected.json"
end

begin "$root/test_fingerprinting"
	faucet --fingerprint
	assert_identical "./dist/bundle-b555fd611fda4652d2ed16fd54eff811.js" "./expected.js"
	assert_identical "./dist/bundle_alt.js" "./expected.js"
end

begin "$root/test_bundle_customization"
	faucet
	assert_identical "./dist/bundle.js" "./expected.js"
	assert_identical "./dist/bundle_cjs.js" "./expected_cjs.js"
end

begin "$root/test_custom_config"
	faucet -c assets.js
	assert_identical "./dist/bundle.js" "./expected.js"
end

begin "$root/test_compact"
	faucet --compact
	assert_identical "./dist/bundle.js" "./expected.js"
end

echo; echo "SUCCESS: all tests passed"
